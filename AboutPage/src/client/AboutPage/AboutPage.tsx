import * as React from 'react';

// Styling imports
import './AboutPage.scss';

const AboutPage: React.FC = () => {

    const [divToShow, setDivToShow] = React.useState<string>("About");
    const [subMenuToShow, setSubMenuToShow] = React.useState<string>("gene-expression")

    // --------- ABOUT -----------------
    const About: React.FC = () => { 
        return(
            <div id="About">
                <p>
                    ImmuneSpace blossomed from a shared idea that generating large 
                    amounts collaborative data, cross-center and cross-assay, 
                    to characterize the status of the immune system in diverse 
                    populations under normal conditions and in response to various 
                    stimuli would be a beneficial platform. The Human Immunology 
                    Project Consortium (
                    <a href="https://www.immuneprofiling.org/hipc/page/show?pg=home" target="_blank">HIPC</a>
                    ) program, an organization founded by the 
                    <a href="https://www.niaid.nih.gov/about/dait" target="_blank"> NIAID-DAIT</a>
                    , released ImmuneSpace in January 15, 2016. 
                </p>
                <p>
                    Since its release, ImmuneSpace has developed into powerful 
                    data management and analysis engine, where datasets can be 
                    easily explored and analyzed using state-of-the-art 
                    computational tools. ImmuneSpace takes advantage of the 
                    considerable infrastructure already developed through 
                    another HIPC platform, 
                    <a href="https://immport.niaid.nih.gov" target="_blank"> ImmPort</a>
                    , which serves as a repository 
                    of data generated by investigators funded by DAIT. Data are 
                    submitted by each HIPC center to ImmPort using a set of 
                    standardized data templates. Once ImmPort has made these data 
                    public through routine data releases, the data are transferred 
                    to ImmuneSpace where integrative modeling across various data 
                    types and HIPC centers are enabled.
                </p>
                <p>
                    ImmuneSpace provides multiple ways to interact with, visualize, 
                    and analyze data. Each study contains tabs to view raw data, 
                    run common analyses, and look at custom reports. All the 
                    analyses make use of the R statistical language, leveraging 
                    <a href="http://rforge.net/Rserve/" target="_blank"> Rserve </a> 
                    to improve performance and 
                    <a href="http://yihui.name/knitr/" target="_blank"> knitr </a>
                    to enable full reproducibility. 
                </p>
                <img src="/AboutPage/images/dataflow.jpeg"
                    padding-top="80%"
                    width="40%"
                    style={{alignSelf: 'center'}}
                    />
            </div>
        )
    }

    const DataStandards: React.FC = () => { 
        return(
            <div id="DataStandards">
                    <p>The HIPC data standards working group defines the metadata, assay results and controlled vocabularies used by HIPC centers to submit experimental results to NIAID/ImmPort. Most of the standards we develop are incorporated into the ImmPort data deposition templates. All HIPC centers submit data directly to ImmPort using the templates available on the <a href="http://www.immport.org/immport-open/public/home/dataTemplates">ImmPort Website</a>.</p>   
                    <p>HIPC specifies content for some experiment types. This includes:</p> 
                    <ul>
                        <li><strong>Transcriptional Profiling Experiments (e.g. microarray and RNA-seq)</strong>
                            <br></br>In addition to the experimental metadata submission to ImmPort, HIPC requires submission of the underlying data to NCBI. 
                            For details, please see <a href="http://www.immport.org/images/home/HIPC.Transcriptional_Profiling_Data_Standards.txt">HIPC Standards Working Group Transcription Profiling standards</a>.
                        </li>
                        <br></br>
                        <li><strong>Cell Cytometry Experiments</strong><br></br>
                            HIPC defines the standard for specifying cell population definitions and names. For details, please see <a href="https://www.immport.org/docs/standards/Cytometry_Data_Standard.pdf">HIPC Standards Working Group Cell Population Specification</a>.
                            In addition to raw data in .fcs files, HIPC requires the submission of derived data (e.g., the cell population frequencies). For CyTOF and flow cytometry, these are submitted using the associated derived data templates available on the <a href="http://www.immport.org/immport-open/public/home/dataTemplates">ImmPort Website</a>.
                        </li>
                        <br></br>
                        <li><strong>Multiplex Bead Array Assays (MBAA) Experiments (e.g. Luminex)</strong><br></br>
                            In addition to results from the assayed biological samples (experimental samples), HIPC requires submission of the results from the control samples and their standard curves. These are submitted using the control sample and standard curve templates available on the <a href="http://www.immport.org/immport-open/public/home/dataTemplates">ImmPort Website</a>.
                        </li>
                        <br></br>
                        <li><strong>Hemagglutination Inhibition Assay (HAI) experiments</strong><br></br>
                            The virus strain names are validated using NCBI Taxon with links to Taxon IDs. HAI data are submitted using HAI results templates available on the <a href="http://www.immport.org/immport-open/public/home/dataTemplates">ImmPort Website</a>.
                        </li>
                        <br></br>
                        <li><strong>Immune Exposure</strong><br></br>
                            HIPC specifies a structured format (immune exposure model) to characterize human immune responses/mechanisms elicited by vaccinations, adjuvants or natural infection. In addition, an immune exposure validator has been developed. The immune exposure metadata are entered using the human subject template available on the <a href="http://www.immport.org/immport-open/public/home/dataTemplates">ImmPort Website</a>.
                        </li>
                        <br></br>
                        <li><strong>Human Subject</strong><br></br>
                            As part of the entry of the human subjectâ€™s demographic information, HIPC uses the Gazetteer ontology to standardize the country location with a link to the Gazetteer ID. For the United States, the location field also includes the name of the state. Location information is entered using the human subject template available on the <a href="http://www.immport.org/immport-open/public/home/dataTemplates">ImmPort Website</a>.
                        </li>
                        <br></br>
                    </ul>

                    <p><strong>Publications</strong></p>
                    <ul>
                        <li>
                            <p>The following paper describes how to report and connect cell type names and gating definitions through ontologies including the Cell Ontology and Protein Ontology:</p>
                            <p><a href="https://bmcbioinformatics.biomedcentral.com/articles/10.1186/s12859-019-2725-5">James A. Overton JA, Vita R, Dunn P, Burel JG, Bukhari SAC, Cheung KH, Kleinstein SH, Diehl AD, Peters B. (2019) Reporting and connecting cell type names and gating definitions through ontologies. BMC Bioinformatics 20: 182</a>.</p>
                        </li>
                        <li>
                            <p>The following papers describe the development and use of a structured/ontological model to represent and validate human immune exposures elicited by vaccinations, adjuvants or natural infection:</p>
                            <p><a href="https://academic.oup.com/database/article/doi/10.1093/database/baaa016/5818925">Vita R, Overton JA, Dunn P, Cheung KH, Kleinstein SH, Sette A, Bjoern Peters B. (2019) A structured model for immune exposures. Database 2020:baaa016</a>.</p>
                            <p><a href="http://ceur-ws.org/Vol-2285/ICBO_2018_paper_41.pdf">Vita R, Overton JA, Cheung KH, Kleinstein SH, Peter B. Proceedings of the 9th International Conference on Biological Ontology (ICBO 2018), Corvallis, Oregon, USA</a>.</p>
                            <p><a href="https://www.jimmunol.org/content/202/1_Supplement/130.26">Vita RJ, Overton JA, Cheung KH, Dunn P, Burel J, Bukhari SAC, Diehl AD, Kleinstein SH, Sette A, Peters B. (2019) Formal representation of immunology related data with ontologies. J Immunol May 1, 2019, 202 (1 Supplement) 130.26</a>.</p>
                        </li>
                    </ul>
                                                                                                                          
                    <p><strong>Questions?</strong></p>
                    <p>For questions about ImmPort data depositions, email: <a href="mailto:bisc_helpdesk@niaid.nih.gov">bisc_helpdesk@niaid.nih.gov</a></p>
                    <p>For questions about HIPC data standards, email: <a href="mailto:hipc-standards@googlegroups.com">hipc-standards@googlegroups.com</a></p>
                    <p>More information about HIPC can be found at <a href="https://www.immuneprofiling.org/hipc/page/show">immuneprofiling.org</a></p>
            </div>
        )
    }

    // --------- DataProcessing-------------
    const DataProcessing: React.FC = () => { 

        const Cytometry: React.FC = () => {
            return(
                <div>
                    <p>
                        Under Construction
                    </p>
                </div>
            )
        }

        const GeneExpression: React.FC = () => {
            return(
                <div>
                   <img src="/AboutPage/images/ge_standardization.png"
                        padding-top="80%"
                        width="65%"/>
                </div>
            )
        }

        const ImmuneResponse: React.FC = () => {
            return(
                <div>
                    <p>
                        Under Construction
                    </p>
                </div>
            )
        }

        return(
            <div id="DataProcessing">
                { subMenuToShow == "cytometry" ? <Cytometry/> : null}
                { subMenuToShow == "gene-expression" ? <GeneExpression/> : null}
                { subMenuToShow == "immune-response" ? <ImmuneResponse/> : null}
            </div>
        )
    }

    // --------- NAVBAR -----------------
    // Use bootstrap in Navbar
    const Navbar: React.FC = () => { 
        
        const divInfo = [
            {
                id: "about",
                tag: "About",
                text: "About"
            },
            {
                id: "data-standards",
                tag: "DataStandards",
                text: "Data Standards"
            },
            {
                id: "data-processing",
                tag: "DataProcessing",
                text: "Data Processing",
                subMenu: [
                    {
                        tag: "cytometry",
                        text: "Cytometry"
                    },
                    {
                        tag: "gene-expression",
                        text: "Gene Expression"
                    },
                    {
                        tag: "immune-response",
                        text: "Immune Response"
                    }
                ]
            }
        ]

       
        const navBarElements = divInfo.map(function(el){
            const itemId = "navbar-link-" + el.id;
            const href = "#" + el.tag;
    
            if(["DataProcessing"].indexOf(el.tag) !== -1){
                var className = "nav-item dropdown" + (divToShow == el.tag ? " active" : "");
                const dropDownId = el.tag + "Dropdown"

                const subMenuHtml = el.subMenu.map(function(subel, i){
                    const tag = "#" + subel.tag
                    return(
                        <li>
                            <a  key={i} 
                                id={subel.tag} 
                                href={tag} 
                                onClick={function(){
                                    setDivToShow(el.tag)
                                    setSubMenuToShow(subel.tag)
                                }}>
                                {subel.text}
                            </a>
                        </li>
                    )
                })

                return(
                    <li id={itemId} className={className}>
                        <a  className="dropdown-toggle" 
                            href={href} 
                            id={dropDownId} 
                            role="button" 
                            data-toggle="dropdown" 
                            aria-haspopup="true" 
                            aria-expanded="false"
                            onClick={function(){
                                const parentNode = document.getElementById(itemId)
                                if(parentNode.className == "nav-item dropdown active"){
                                    parentNode.className = "nav-item dropdown active open"
                                }else if(parentNode.className == "nav-item dropdown active open"){
                                    parentNode.className = "nav-item dropdown active"
                                }
                            }}>
                            {el.text} <span className="caret"></span>
                        </a>
                        <ul className="dropdown-menu">
                            {subMenuHtml}
                        </ul>
                        
                    </li>
                )
            }else{
                const className = divToShow == el.tag ? " active" : "";
                return(
                    <li id = {itemId} className = {className}>
                        <a href = {href} onClick={() => setDivToShow(el.tag)}>
                            {el.text}
                        </a>
                    </li>
                )
            }
        })

        return(
            <nav className="navbar navbar-default" style={{backgroundColor: 'white'}} >
                <div className="container-fluid">
                    <ul className="nav navbar-nav">
                        {navBarElements}
                    </ul>
                </div>
            </nav>
        )
    }

    // return
    return(
        <div>
            <Navbar/>
            { divToShow == "About" ? <About/> : null}
            { divToShow == "DataStandards" ? <DataStandards/> : null}
            { divToShow == "DataProcessing" ? <DataProcessing/> : null}
        </div>
    )
}

export const App: React.FC = () => {

    const filterBanner = document.getElementById('filter-banner')
    filterBanner.style.display = 'none'

    // Must return a React Fragment
    return <AboutPage/>
}